name: Build All Tweaks
permissions:
    contents: write

on:
    push:
    workflow_dispatch:

jobs:
    cleanup:
        runs-on: macos-latest
        steps:
            - uses: actions/checkout@v4

            - name: Cleaning up existing releases and tags
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  TAG_NAME="release"

                  RELEASE_ID=$(gh api repos/${{ github.repository }}/releases | jq -r --arg TAG_NAME "$TAG_NAME" '.[] | select(.tag_name == $TAG_NAME) | .id')
                  if [ -n "$RELEASE_ID" ]; then
                      echo "Deleting release with ID: $RELEASE_ID"
                      gh api --method DELETE repos/${{ github.repository }}/releases/$RELEASE_ID
                  else
                      echo "No release found for tag: $TAG_NAME"
                  fi

                  if git ls-remote --tags origin | grep -q "refs/tags/$TAG_NAME"; then
                      echo "Deleting tag: $TAG_NAME"
                      git push --delete origin $TAG_NAME
                  else
                      echo "No tag found: $TAG_NAME"
                  fi

    build:
        needs: cleanup
        runs-on: macos-latest
        strategy:
            matrix:
                project:
                    - AmongLock
                    - AppareilPhoto
                    - Astolfo
                    - Nita
        steps:
            - uses: actions/checkout@v4

            - name: Set up Theos
              uses: waruhachi/theos-action@v2.2.2
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  theos-src: 'roothide/theos'

            - name: Build Package
              shell: bash
              working-directory: ${{ matrix.project }}
              run: |
                  export THEOS=~/theos

                  make clean package FINALPACKAGE=1
                  make clean package FINALPACKAGE=1 THEOS_PACKAGE_SCHEME=rootless
                  make clean package FINALPACKAGE=1 THEOS_PACKAGE_SCHEME=roothide

            - name: Save Metadata
              id: metadata
              shell: bash
              working-directory: ${{ matrix.project }}
              run: |
                  mkdir -p $GITHUB_WORKSPACE/${{ matrix.project }}

                  MD5_ARM=$(md5 -q packages/*_iphoneos-arm.deb)
                  SHA1_ARM=$(shasum -a 1 packages/*_iphoneos-arm.deb | awk '{ print $1 }')
                  SHA256_ARM=$(shasum -a 256 packages/*_iphoneos-arm.deb | awk '{ print $1 }')

                  MD5_ARM64=$(md5 -q packages/*_iphoneos-arm64.deb)
                  SHA1_ARM64=$(shasum -a 1 packages/*_iphoneos-arm64.deb | awk '{ print $1 }')
                  SHA256_ARM64=$(shasum -a 256 packages/*_iphoneos-arm64.deb | awk '{ print $1 }')

                  MD5_ARM64E=$(md5 -q packages/*_iphoneos-arm64e.deb)
                  SHA1_ARM64E=$(shasum -a 1 packages/*_iphoneos-arm64e.deb | awk '{ print $1 }')
                  SHA256_ARM64E=$(shasum -a 256 packages/*_iphoneos-arm64e.deb | awk '{ print $1 }')

                  echo "${{ matrix.project }}" > $GITHUB_WORKSPACE/${{ matrix.project }}/metadata.txt
                  echo "$MD5_ARM,$SHA1_ARM,$SHA256_ARM,$MD5_ARM64,$SHA1_ARM64,$SHA256_ARM64,$MD5_ARM64E,$SHA1_ARM64E,$SHA256_ARM64E" >> $GITHUB_WORKSPACE/${{ matrix.project }}/metadata.txt

            - name: Generate Release Notes
              id: release-notes
              shell: bash
              run: |
                  FILE=$GITHUB_WORKSPACE/${{ matrix.project }}/metadata.txt
                  PROJECT=$(head -n 1 "$FILE")
                  METADATA=$(tail -n 1 "$FILE")

                  MD5_ARM=$(echo "$METADATA" | cut -d',' -f1)
                  SHA1_ARM=$(echo "$METADATA" | cut -d',' -f2)
                  SHA256_ARM=$(echo "$METADATA" | cut -d',' -f3)
                  MD5_ARM64=$(echo "$METADATA" | cut -d',' -f4)
                  SHA1_ARM64=$(echo "$METADATA" | cut -d',' -f5)
                  SHA256_ARM64=$(echo "$METADATA" | cut -d',' -f6)
                  MD5_ARM64E=$(echo "$METADATA" | cut -d',' -f7)
                  SHA1_ARM64E=$(echo "$METADATA" | cut -d',' -f8)
                  SHA256_ARM64E=$(echo "$METADATA" | cut -d',' -f9)

                  echo "### $PROJECT" >> release_body.md
                  echo "iphoneos-arm:" >> release_body.md
                  echo "  MD5: $MD5_ARM" >> release_body.md
                  echo "  SHA1: $SHA1_ARM" >> release_body.md
                  echo "  SHA256: $SHA256_ARM" >> release_body.md
                  echo "" >> release_body.md
                  echo "iphoneos-arm64:" >> release_body.md
                  echo "  MD5: $MD5_ARM64" >> release_body.md
                  echo "  SHA1: $SHA1_ARM64" >> release_body.md
                  echo "  SHA256: $SHA256_ARM64" >> release_body.md
                  echo "" >> release_body.md
                  echo "iphoneos-arm64e:" >> release_body.md
                  echo "  MD5: $MD5_ARM64E" >> release_body.md
                  echo "  SHA1: $SHA1_ARM64E" >> release_body.md
                  echo "  SHA256: $SHA256_ARM64E" >> release_body.md
                  echo "" >> release_body.md

            - name: Create GitHub Release
              uses: softprops/action-gh-release@v2
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: release
                  name: Release
                  body_path: release_body.md
                  files: ${{ matrix.project }}/packages/**/*.deb
                  draft: false
                  prerelease: false
                  make_latest: true
                  append_body: true
